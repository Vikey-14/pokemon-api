from fastapi import FastAPI,HTTPException,status,Path,Query
from pydantic import BaseModel,Field
from enum import Enum
from typing import Dict,Optional,List,Union
from file_handler import load_pokedex



app=FastAPI()

pokedex: Dict[int,dict]= load_pokedex()

class Region(str, Enum):
    kanto="Kanto"
    johto="Johto"
    hoenn="Hoenn"
    sinnoh="Sinnoh"
    unova="Unova"
    kalos="Kalos"
    alola="Alola"
    galar="Galar"
    paldea="Paldea"
    hisui="Hisui"

class Pokemon(BaseModel):
    name:str=Field(...,alias="poke_name",title="Pokemon Name", description="Provides Pokemon Name", example="Charizard")
    level:int=Field(...,ge=5,le=100, title="Pokemon Level",description="Provides Pokemon Level",example=25)
    ptype:str=Field(...,alias="Type", title="Pokemon Typing", description="Provides Pokemon Typing",example="Fire")
    region: Region = Field(..., title="Pokemon Region", description="Region to which this Pokémon belongs", example="Hoenn")



class ResponsiveMessage(BaseModel):
    message:str
    data:Union[Pokemon,str,List[Pokemon]]


@app.get("/trainerbox/{region}/{level}", response_model=ResponsiveMessage, tags=["Trainer View"], 
         summary="Get pokemon by Region and Level where its typing is optional.",
         description=''' Returns Pokemon by Region and Level. Supports Optional filtering by the pokemon's typing.''',
         response_description="Filtered Pokemon List or 404 if none match.")

def get_pokemon_by_pokemon_region_and_level_filtered(
    region: Region= Path(...,title="Region Name",regex="^[A-Za-z]{3,20}$", description="One of the allowed regions",example="Hoenn"),
    level:int= Path(..., ge=5, le=100, description="Optional level filter",example=50), 
    ptype: str = Query(None,regex="^[A-Za-z]{3,20}$", description="Optional Pokémon type filter",example="Fire")
      ):
    
 filtered = [
    p for p in pokedex.values()
    if p.get("region","").lower() == region.value.lower() 
     and(p.get ("level")== level)
    and (ptype is None or p.get("Type","").lower()== ptype.lower()) 
    ]
 
 if not filtered:
    raise HTTPException(
       status_code=status.HTTP_404_NOT_FOUND,
       detail=f"Invalid Path Parameters {region} and {level} provided."
    )
 
 return{
    "message": "Pokemon Information fetched from the details provided.",
    "data": filtered
 }

